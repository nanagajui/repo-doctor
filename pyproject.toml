[build-system]
requires = ["setuptools>=42"]
build-backend = "setuptools.build_meta"

[project]
name = "repo-doctor"
version = "0.1.0"
description = "A command-line tool for analyzing and maintaining Git repositories"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "aiohttp>=3.9.0",
    "docker>=7.0.0",
    "rich>=13.0.0",
    "pygithub>=2.0.0",
    "pypi-simple>=1.0.0",
    "jinja2>=3.0.0",
    "pyyaml>=6.0.0",
    "psutil>=5.9.0",
    "gitpython>=3.1.0",
    "packaging>=21.0",
    "python-dotenv>=1.0.0",
    # ML and data science dependencies
    "scikit-learn>=1.3.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "joblib>=1.3.0",
]

[project.urls]
Homepage = "https://github.com/nanagajui/repo-doctor"
Repository = "https://github.com/nanagajui/repo-doctor.git"
Issues = "https://github.com/nanagajui/repo-doctor/issues"

[project.optional-dependencies]
agents = [
    "langchain>=0.1.0",
    "openai>=1.0.0",
    "chromadb>=0.4.0",
]
dev = [
    "black>=25.0.0",
    "isort>=6.0.0",
    "flake8>=7.0.0",
    "mypy>=1.0.0",
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-timeout>=2.2.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["repo_doctor*"]

[project.scripts]
repo-doctor = "repo_doctor.cli:main"

# Development tools configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["repo_doctor"]


[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "docker.*",
    "chromadb.*",
    "langchain.*",
    "openai.*",
    "pypi_simple.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
timeout = 10
timeout_method = "thread"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=repo_doctor",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async",
    "benchmark: marks tests as benchmarks",
]

[tool.coverage.run]
source = ["repo_doctor"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\(\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]