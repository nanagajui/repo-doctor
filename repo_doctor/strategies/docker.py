"""Docker strategy for containerized environments."""

from typing import List

from ..models.analysis import Analysis
from ..models.resolution import GeneratedFile, Resolution, StrategyType
from .base import BaseStrategy


class DockerStrategy(BaseStrategy):
    """Docker-based environment generation strategy."""

    def __init__(self):
        super().__init__(StrategyType.DOCKER, priority=10)

    def can_handle(self, analysis: Analysis) -> bool:
        """Check if Docker strategy can handle this analysis."""
        # Docker can handle most cases, especially GPU workloads
        return True

    def generate_solution(self, analysis: Analysis) -> Resolution:
        """Generate Docker-based solution."""
        strategy = self._create_strategy_config(
            can_handle_gpu=True, estimated_setup_time=300
        )

        generated_files = []

        # Generate Dockerfile
        dockerfile_content = self._generate_dockerfile(analysis)
        generated_files.append(
            GeneratedFile(
                path="Dockerfile",
                content=dockerfile_content,
                description="Multi-stage Docker build for the repository",
            )
        )

        # Generate docker-compose.yml if needed
        if analysis.is_gpu_required():
            compose_content = self._generate_compose_file(analysis)
            generated_files.append(
                GeneratedFile(
                    path="docker-compose.yml",
                    content=compose_content,
                    description="Docker Compose configuration with GPU support",
                )
            )

        # Generate setup script
        setup_script = self._generate_setup_script(analysis)
        generated_files.append(
            GeneratedFile(
                path="setup.sh",
                content=setup_script,
                description="Setup script for building and running the container",
                executable=True,
            )
        )

        return Resolution(
            strategy=strategy,
            generated_files=generated_files,
            setup_commands=["chmod +x setup.sh", "./setup.sh"],
            instructions=self._generate_instructions(analysis),
            estimated_size_mb=2048,  # Typical Docker image size
        )

    def _generate_dockerfile(self, analysis: Analysis) -> str:
        """Generate Dockerfile content."""
        # Determine base image
        if analysis.is_gpu_required():
            if analysis.cuda_version_required:
                base_image = (
                    f"nvidia/cuda:{analysis.cuda_version_required}-devel-ubuntu20.04"
                )
            else:
                base_image = "nvidia/cuda:11.8-devel-ubuntu20.04"
        else:
            base_image = "python:3.10-slim"

        python_deps = [dep.name for dep in analysis.get_python_dependencies()]

        dockerfile = f"""# Generated by Repo Doctor
FROM {base_image}

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \\
    git \\
    wget \\
    curl \\
    && rm -rf /var/lib/apt/lists/*

# Install Python if not in base image
{"RUN apt-get update && apt-get install -y python3 python3-pip" if "cuda" in base_image else ""}

# Copy requirements
COPY requirements.txt* ./
COPY setup.py* ./
COPY pyproject.toml* ./

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip
{"RUN pip install --no-cache-dir " + " ".join(python_deps) if python_deps else "# No specific dependencies found"}

# Copy source code
COPY . .

# Install package if setup.py exists
RUN if [ -f setup.py ]; then pip install -e .; fi

# Expose common ports
EXPOSE 8000 8080 7860

# Default command
CMD ["python", "-c", "print('Container ready! Repository: {analysis.repository.name}')"]
"""
        return dockerfile

    def _generate_compose_file(self, analysis: Analysis) -> str:
        """Generate docker-compose.yml for GPU workloads."""
        return f"""# Generated by Repo Doctor
version: '3.8'

services:
  {analysis.repository.name.lower().replace('-', '_')}:
    build: .
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - .:/app
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
    ports:
      - "8000:8000"
      - "8080:8080" 
      - "7860:7860"
    stdin_open: true
    tty: true
"""

    def _generate_setup_script(self, analysis: Analysis) -> str:
        """Generate setup script."""
        gpu_flag = "--gpus all" if analysis.is_gpu_required() else ""

        return f"""#!/bin/bash
# Generated by Repo Doctor - Setup script

set -e

echo "üê≥ Building Docker image for {analysis.repository.name}..."
docker build -t {analysis.repository.name.lower()} .

echo "üöÄ Starting container..."
docker run -it {gpu_flag} \\
  -v $(pwd):/app \\
  -p 8000:8000 \\
  -p 8080:8080 \\
  -p 7860:7860 \\
  {analysis.repository.name.lower()}

echo "‚úÖ Setup complete!"
"""

    def _generate_instructions(self, analysis: Analysis) -> str:
        """Generate user instructions."""
        return f"""# Docker Environment Setup

Your Docker environment has been generated for **{analysis.repository.name}**.

## Quick Start

1. Make the setup script executable and run it:
   ```bash
   chmod +x setup.sh
   ./setup.sh
   ```

2. Or build and run manually:
   ```bash
   docker build -t {analysis.repository.name.lower()} .
   docker run -it {"--gpus all " if analysis.is_gpu_required() else ""}{analysis.repository.name.lower()}
   ```

## GPU Support
{"‚úÖ GPU support is enabled for this repository." if analysis.is_gpu_required() else "‚ÑπÔ∏è No GPU requirements detected."}

## Ports
- 8000: Default application port
- 8080: Alternative web port  
- 7860: Gradio/Streamlit default

## Next Steps
- Modify the Dockerfile if you need additional dependencies
- Check the container logs if you encounter issues
- Use `docker exec -it <container_id> bash` to access the running container
"""
