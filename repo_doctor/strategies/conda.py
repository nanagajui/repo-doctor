"""Conda strategy for Python environment management."""

from typing import List

from ..models.analysis import Analysis
from ..models.resolution import GeneratedFile, Resolution, StrategyType
from .base import BaseStrategy


class CondaStrategy(BaseStrategy):
    """Conda-based environment generation strategy."""

    def __init__(self, config=None):
        from ..utils.config import Config
        super().__init__(StrategyType.CONDA, priority=8)
        self.config = config or Config.load()

    def can_handle(self, analysis: Analysis) -> bool:
        """Check if Conda strategy can handle this analysis."""
        # Conda is good for scientific/ML packages
        ml_indicators = ["torch", "tensorflow", "numpy", "scipy", "pandas", "sklearn"]
        deps = [dep.name.lower() for dep in analysis.get_python_dependencies()]
        return any(indicator in dep for dep in deps for indicator in ml_indicators)

    def generate_solution(self, analysis: Analysis) -> Resolution:
        """Generate Conda-based solution."""
        strategy = self._create_strategy_config(
            can_handle_gpu=True, estimated_setup_time=180
        )

        generated_files = []

        # Generate environment.yml
        env_content = self._generate_environment_yml(analysis)
        generated_files.append(
            GeneratedFile(
                path="environment.yml",
                content=env_content,
                description="Conda environment specification",
            )
        )

        # Generate setup script
        setup_script = self._generate_setup_script(analysis)
        generated_files.append(
            GeneratedFile(
                path="setup_conda.sh",
                content=setup_script,
                description="Conda environment setup script",
                executable=True,
            )
        )

        return Resolution(
            strategy=strategy,
            generated_files=generated_files,
            setup_commands=["chmod +x setup_conda.sh", "./setup_conda.sh"],
            instructions=self._generate_instructions(analysis),
            estimated_size_mb=self.config.advanced.default_conda_size_mb,
        )

    def _generate_environment_yml(self, analysis: Analysis) -> str:
        """Generate environment.yml content."""
        python_version = analysis.python_version_required or self.config.advanced.default_python_version

        # Separate conda and pip dependencies
        conda_deps = ["python=" + python_version]
        pip_deps = []

        for dep in analysis.get_python_dependencies():
            # Common packages available via conda
            if dep.name.lower() in [
                "numpy",
                "scipy",
                "pandas",
                "matplotlib",
                "scikit-learn",
                "jupyter",
            ]:
                if dep.version:
                    conda_deps.append(f"{dep.name}={dep.version}")
                else:
                    conda_deps.append(dep.name)
            else:
                if dep.version:
                    pip_deps.append(f"{dep.name}=={dep.version}")
                else:
                    pip_deps.append(dep.name)

        # Add GPU support if needed
        if analysis.is_gpu_required():
            conda_deps.extend(["cudatoolkit", "cudnn"])

        env_yml = f"""# Generated by Repo Doctor
name: {analysis.repository.name.lower().replace('-', '_')}
channels:
  - conda-forge
  - pytorch
  - nvidia
dependencies:
"""

        for dep in conda_deps:
            env_yml += f"  - {dep}\n"

        if pip_deps:
            env_yml += "  - pip\n  - pip:\n"
            for dep in pip_deps:
                env_yml += f"    - {dep}\n"

        return env_yml

    def _generate_setup_script(self, analysis: Analysis) -> str:
        """Generate conda setup script."""
        env_name = analysis.repository.name.lower().replace("-", "_")

        return f"""#!/bin/bash
# Generated by Repo Doctor - Conda setup script

set -e

echo "üêç Setting up Conda environment for {analysis.repository.name}..."

# Check if conda is installed
if ! command -v conda &> /dev/null; then
    echo "‚ùå Conda not found. Please install Miniconda or Anaconda first."
    echo "Visit: https://docs.conda.io/en/latest/miniconda.html"
    exit 1
fi

# Create environment
echo "üì¶ Creating conda environment: {env_name}"
conda env create -f environment.yml

echo "üîß Activating environment..."
conda activate {env_name}

# Install package if setup.py exists
if [ -f setup.py ]; then
    echo "üì• Installing package in development mode..."
    pip install -e .
fi

echo "‚úÖ Conda environment setup complete!"
echo "To activate: conda activate {env_name}"
"""

    def _generate_instructions(self, analysis: Analysis) -> str:
        """Generate user instructions."""
        env_name = analysis.repository.name.lower().replace("-", "_")

        return f"""# Conda Environment Setup

Your Conda environment has been generated for **{analysis.repository.name}**.

## Prerequisites
- Conda (Miniconda or Anaconda) must be installed
- Download from: https://docs.conda.io/en/latest/miniconda.html

## Quick Start

1. Run the setup script:
   ```bash
   chmod +x setup_conda.sh
   ./setup_conda.sh
   ```

2. Or create manually:
   ```bash
   conda env create -f environment.yml
   conda activate {env_name}
   ```

## Usage

Activate the environment before working:
```bash
conda activate {env_name}
```

Deactivate when done:
```bash
conda deactivate
```

## GPU Support
{"‚úÖ CUDA toolkit included for GPU support." if analysis.is_gpu_required() else "‚ÑπÔ∏è CPU-only environment configured."}

## Managing the Environment

- Update: `conda env update -f environment.yml`
- Remove: `conda env remove -n {env_name}`
- List packages: `conda list`
"""
