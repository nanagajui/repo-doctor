"""Micromamba strategy for Python environment management."""

from typing import List, Tuple
from pathlib import Path

from ..models.analysis import Analysis
from ..models.resolution import GeneratedFile, Resolution, StrategyType
from .base import BaseStrategy


class MicromambaStrategy(BaseStrategy):
    """Micromamba-based environment generation strategy."""

    def __init__(self, config=None):
        from ..utils.config import Config
        super().__init__(StrategyType.MICROMAMBA, priority=9)  # Higher than conda
        self.config = config or Config.load()

    def can_handle(self, analysis: Analysis) -> bool:
        """Check if Micromamba strategy can handle this analysis."""
        # Micromamba excels with ML packages and CI environments
        ml_indicators = ["torch", "tensorflow", "numpy", "scipy", "pandas", "sklearn"]
        deps = [dep.name.lower() for dep in analysis.get_python_dependencies()]
        has_ml_deps = any(indicator in dep for dep in deps for indicator in ml_indicators)
        
        # Prefer micromamba for ML workloads and CI-friendly environments
        return has_ml_deps

    def generate_solution(self, analysis: Analysis) -> Resolution:
        """Generate Micromamba-based solution."""
        strategy = self._create_strategy_config(
            can_handle_gpu=True, estimated_setup_time=120  # Faster than conda
        )

        generated_files = []

        # Generate environment.yml and requirements.txt
        env_content, req_content = self._generate_environment_files(analysis)
        
        generated_files.append(
            GeneratedFile(
                path="environment.yml",
                content=env_content,
                description="Micromamba environment specification (conda packages only)",
            )
        )
        
        if req_content:
            generated_files.append(
                GeneratedFile(
                    path="requirements.txt",
                    content=req_content,
                    description="Pip requirements for packages not available via conda",
                )
            )

        # Generate setup script
        setup_script = self._generate_setup_script(analysis, bool(req_content))
        generated_files.append(
            GeneratedFile(
                path="setup_micromamba.sh",
                content=setup_script,
                description="Micromamba environment setup script",
                executable=True,
            )
        )

        return Resolution(
            strategy=strategy,
            generated_files=generated_files,
            setup_commands=["chmod +x setup_micromamba.sh", "./setup_micromamba.sh"],
            instructions=self._generate_instructions(analysis, bool(req_content)),
            estimated_size_mb=int(self.config.advanced.default_conda_size_mb * 0.8),  # Smaller than conda
        )

    def _generate_environment_files(self, analysis: Analysis) -> Tuple[str, str]:
        """Generate both environment.yml (conda) and requirements.txt (pip)."""
        python_version = analysis.python_version_required or self.config.advanced.default_python_version

        # Package classification for optimal performance
        CONDA_PREFERRED_PACKAGES = {
            "numpy", "scipy", "pandas", "matplotlib", "scikit-learn", "jupyter",
            "pytorch", "tensorflow", "tensorflow-gpu", "cudatoolkit", "cudnn",
            "pillow", "opencv", "imageio", "tqdm", "requests", "pyyaml"
        }

        # Separate conda and pip dependencies
        conda_deps = [f"python={python_version}"]
        pip_deps = []

        for dep in analysis.get_python_dependencies():
            dep_name_lower = dep.name.lower()
            
            # Check if package is better served by conda
            if any(conda_pkg in dep_name_lower for conda_pkg in CONDA_PREFERRED_PACKAGES):
                if dep.version:
                    conda_deps.append(f"{dep.name}={dep.version}")
                else:
                    conda_deps.append(dep.name)
            else:
                if dep.version:
                    pip_deps.append(f"{dep.name}=={dep.version}")
                else:
                    pip_deps.append(dep.name)

        # Add GPU support if needed
        if analysis.is_gpu_required():
            conda_deps.extend(["cudatoolkit", "cudnn"])

        # Generate environment.yml
        env_yml = f"""# Generated by Repo Doctor - Micromamba Environment
name: {analysis.repository.name.lower().replace('-', '_')}
channels:
  - conda-forge
  - pytorch
  - nvidia
dependencies:
"""
        for dep in conda_deps:
            env_yml += f"  - {dep}\n"

        # Generate requirements.txt if needed
        req_txt = ""
        if pip_deps:
            req_txt = "# Generated by Repo Doctor - Pip Requirements\n"
            req_txt += "# Install after creating conda environment\n\n"
            for dep in pip_deps:
                req_txt += f"{dep}\n"

        return env_yml, req_txt

    def _generate_setup_script(self, analysis: Analysis, has_pip_deps: bool) -> str:
        """Generate micromamba setup script."""
        env_name = analysis.repository.name.lower().replace("-", "_")

        script = f"""#!/bin/bash
# Generated by Repo Doctor - Micromamba setup script

set -e

echo "üöÄ Setting up Micromamba environment for {analysis.repository.name}..."

# Check if micromamba is installed
if ! command -v micromamba &> /dev/null; then
    echo "‚ùå Micromamba not found. Installing micromamba..."
    echo "Visit: https://mamba.readthedocs.io/en/latest/installation.html"
    
    # Auto-install micromamba if curl is available
    if command -v curl &> /dev/null; then
        echo "üì• Auto-installing micromamba..."
        curl -Ls https://micro.mamba.pm/install.sh | bash
        export PATH="$HOME/.local/bin:$PATH"
    else
        echo "Please install micromamba manually and re-run this script."
        exit 1
    fi
fi

# Create environment
echo "üì¶ Creating micromamba environment: {env_name}"
micromamba create -f environment.yml -p ./env -y

echo "üîß Environment created successfully!"
"""

        if has_pip_deps:
            script += f"""
# Install pip dependencies
if [ -f requirements.txt ]; then
    echo "üì• Installing pip dependencies..."
    micromamba run -p ./env pip install -r requirements.txt
fi
"""

        script += f"""
# Install package if setup.py exists
if [ -f setup.py ]; then
    echo "üì• Installing package in development mode..."
    micromamba run -p ./env pip install -e .
fi

echo "‚úÖ Micromamba environment setup complete!"
echo "To activate: micromamba activate ./env"
echo "To run commands: micromamba run -p ./env <command>"
"""

        return script

    def _generate_instructions(self, analysis: Analysis, has_pip_deps: bool) -> str:
        """Generate user instructions."""
        env_name = analysis.repository.name.lower().replace("-", "_")

        instructions = f"""# Micromamba Environment Setup

Your Micromamba environment has been generated for **{analysis.repository.name}**.

## Prerequisites
- Micromamba (will be auto-installed if not present)
- Download from: https://mamba.readthedocs.io/en/latest/installation.html

## Quick Start

1. Run the setup script:
   ```bash
   chmod +x setup_micromamba.sh
   ./setup_micromamba.sh
   ```

2. Or create manually:
   ```bash
   micromamba create -f environment.yml -p ./env -y"""

        if has_pip_deps:
            instructions += """
   micromamba run -p ./env pip install -r requirements.txt"""

        instructions += f"""
   ```

## Usage

Activate the environment:
```bash
micromamba activate ./env
```

Or run commands without activation:
```bash
micromamba run -p ./env python your_script.py
micromamba run -p ./env jupyter notebook
```

Deactivate when done:
```bash
micromamba deactivate
```

## GPU Support
{"‚úÖ CUDA toolkit included for GPU support." if analysis.is_gpu_required() else "‚ÑπÔ∏è CPU-only environment configured."}

## Managing the Environment

- Update conda packages: `micromamba update -f environment.yml -p ./env`"""

        if has_pip_deps:
            instructions += """
- Update pip packages: `micromamba run -p ./env pip install -r requirements.txt --upgrade`"""

        instructions += f"""
- Remove: `micromamba env remove -p ./env`
- List packages: `micromamba list -p ./env`

## Performance Benefits

‚úÖ **2-3x faster** environment creation vs conda  
‚úÖ **No shell activation** required for CI/Docker  
‚úÖ **Smaller footprint** and faster dependency resolution  
‚úÖ **Drop-in replacement** for conda workflows  
"""

        return instructions
