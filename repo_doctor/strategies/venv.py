"""Virtual environment strategy for lightweight Python environments."""

from typing import List

from ..models.analysis import Analysis
from ..models.resolution import GeneratedFile, Resolution, StrategyType
from .base import BaseStrategy


class VenvStrategy(BaseStrategy):
    """Virtual environment-based strategy."""

    def __init__(self):
        super().__init__(StrategyType.VENV, priority=5)

    def can_handle(self, analysis: Analysis) -> bool:
        """Check if venv strategy can handle this analysis."""
        # Venv works for simple Python projects without complex system deps
        critical_issues = analysis.get_critical_issues()
        has_system_deps = any(
            issue.type == "system_dependency" for issue in critical_issues
        )
        return not has_system_deps and not analysis.is_gpu_required()

    def generate_solution(self, analysis: Analysis) -> Resolution:
        """Generate venv-based solution."""
        strategy = self._create_strategy_config(
            can_handle_gpu=False, estimated_setup_time=60
        )

        generated_files = []

        # Generate requirements.txt
        requirements_content = self._generate_requirements_txt(analysis)
        generated_files.append(
            GeneratedFile(
                path="requirements.txt",
                content=requirements_content,
                description="Python package requirements",
            )
        )

        # Generate setup script
        setup_script = self._generate_setup_script(analysis)
        generated_files.append(
            GeneratedFile(
                path="setup_venv.sh",
                content=setup_script,
                description="Virtual environment setup script",
                executable=True,
            )
        )

        return Resolution(
            strategy=strategy,
            generated_files=generated_files,
            setup_commands=["chmod +x setup_venv.sh", "./setup_venv.sh"],
            instructions=self._generate_instructions(analysis),
            estimated_size_mb=256,
        )

    def _generate_requirements_txt(self, analysis: Analysis) -> str:
        """Generate requirements.txt content."""
        requirements = []

        for dep in analysis.get_python_dependencies():
            if dep.version:
                requirements.append(f"{dep.name}=={dep.version}")
            else:
                requirements.append(dep.name)

        return "\n".join(requirements) + "\n"

    def _generate_setup_script(self, analysis: Analysis) -> str:
        """Generate venv setup script."""
        python_version = analysis.python_version_required or "3.10"

        return f"""#!/bin/bash
# Generated by Repo Doctor - Virtual environment setup script

set -e

echo "🐍 Setting up virtual environment for {analysis.repository.name}..."

# Check Python version
python_cmd="python3"
if command -v python{python_version} &> /dev/null; then
    python_cmd="python{python_version}"
elif command -v python3 &> /dev/null; then
    python_cmd="python3"
else
    echo "❌ Python 3 not found. Please install Python {python_version} or later."
    exit 1
fi

# Create virtual environment
echo "📦 Creating virtual environment..."
$python_cmd -m venv venv

# Activate virtual environment
echo "🔧 Activating virtual environment..."
source venv/bin/activate

# Upgrade pip
echo "⬆️ Upgrading pip..."
pip install --upgrade pip

# Install requirements
if [ -f requirements.txt ]; then
    echo "📥 Installing requirements..."
    pip install -r requirements.txt
fi

# Install package if setup.py exists
if [ -f setup.py ]; then
    echo "📥 Installing package in development mode..."
    pip install -e .
fi

echo "✅ Virtual environment setup complete!"
echo "To activate: source venv/bin/activate"
"""

    def _generate_instructions(self, analysis: Analysis) -> str:
        """Generate user instructions."""
        python_version = analysis.python_version_required or "3.10"

        return f"""# Virtual Environment Setup

Your Python virtual environment has been generated for **{analysis.repository.name}**.

## Prerequisites
- Python {python_version} or compatible version
- pip package manager

## Quick Start

1. Run the setup script:
   ```bash
   chmod +x setup_venv.sh
   ./setup_venv.sh
   ```

2. Or create manually:
   ```bash
   python3 -m venv venv
   source venv/bin/activate
   pip install -r requirements.txt
   ```

## Usage

Activate the environment before working:
```bash
source venv/bin/activate
```

Deactivate when done:
```bash
deactivate
```

## Managing Dependencies

- Add packages: `pip install package_name`
- Update requirements: `pip freeze > requirements.txt`
- Install from requirements: `pip install -r requirements.txt`

## Notes
- This is a lightweight solution for pure Python projects
- For GPU workloads or complex dependencies, consider Docker or Conda
- The virtual environment is created in the `venv/` directory
"""
